Steps:
 1) Save the ".py" files a folder somewhere on your computer to, and save any
      text files of words in dictionaries in "Words".
 2) Open python in the folder selected in step 1 (original folder, not "Words").
 3) Put those filenames in the appropriate place in "WordListUpdater.py" to
      create the word list that you need.
    
    > python WordListUpdater.py
    
 4) Import "DictionaryMaker.py" as "dm" in a python and create a text file
      including information about hooks and anagrams with the following code:
    
    >>> import DictionaryMaker as dm
    >>> dm.text_data_add('filename')
    
      where `filename` is replaced by the name of the file.
 5) Change the name of the file to "UpdatedDic_lexYYYY.txt", where `lexYYYY` is 
      replaced by the name and year of the lexicon you plan to use.
 6) Once all lexica are created, then you can start making the databases.
 7) In python, import "Database0Lexicon.py" as d0 and create the databases with
      the following code:
    
    >>> import Database0Lexicon as d0
    >>> d0.lex_table('lexYYYY')
    >>> d0.lex_db('lexYYYY')
    
 8) Now the database should be created. I we can create users
 9) In python, import "Database1Users.py" in python and create your user account
      using the following code:
    
    >>> import Database1Users as du
    >>> du.create_user('username', ['initvalue', 'multiplier',\ 
            'ltrorder', 'lexicon', 'lexicon1', 'lexlist'])
    
    Here, `username` should be replaced with the username that you wish to use.
    The brackets indicate that all arguments after the first are optional; they
      should not be typed.
    The optional second and third arguments are an integer and a real number.
      The second, 'initvalue', is the initial value of questions you have not
      seen. The default is 8. The third, 'multiplier', is the additional weight
      of more recent responses. The default value is 1.2.
    The optional fourth argument is the order you want letters to show in
      quizzes. The default is alphabetical.
    The optional fifth through seventh arguments are lexica to use for quizzes.
    Here, `lexicon` is the default lexicon for unilexical quizzes, `lexicon1`
      is an alternate default for unilexical quizzes. Lastly, 'lexlist' is the
      list of lexica for multilexical quizzes.
    
10) Now that you have created a username, you can use quizzes.
11) I will now discuss "Database2Lister.py". This file could actually have been
      used before creating a username. It allows you to search the databases and
      create lists to use in quizzes. I will summarize some key functions below.
    
    gram_db - creates a database for words to be used in anagram quizzes
    hook_db - creates a database for words to be used in hook quizzes
      note: the programs above require specification of a lexicon.
    
    judge - Can check if a list of words (separated by commas, spacing is
              unimportant; first argument) is in the specified lexicon (second
              argument).
    search_anag/search_blanag - finds words using all letters in a specified
                                  rack. "search_blanag" allows for blanks (?).
    search_subgram - searches for words found within a string of letters of a
                       user-specified length.
    search_list - a function that can search for words with specified
                    characteristics. Possible specifications:
                  'length <>= ?'   :  Specify the length
                  'score <>= ?'    :  Specify score of tiles (ignores needed
                                        blanks)
                  'vowels <>= ?'   :  Specify number of vowels
                  'jqxz <>= ?'     :  Specify total of Js, Qs, Xs, and Zs.
                  'threeplus <>= ?':  Specify number of tiles worth at least
                                        three points
                  'remfirst = 0/1' :  Specify if the first letter can be removed
                                        to still form a valid word
                  'remlist = 0/1'  :  Specify if the last letter can be removed
                                        to still form a valid word
                  'fhook'          :  Not sure how this can be specified
                  'bhook'          :  Not sure how this can be specified
                  'nrack <>= ?'    :  Specify the number of racks, ignoring blanks
                  'nrack_adj <>= ?':  Specify the number of racks, with 2 blanks
                  
    search_input - I am unsure if this works now.
    
    save_entries - saves lists of acceptable words to the gram database. Very
                     useful to use after a search from "search_list".
    save_grams - saves lists of grams

12) When creating lists to study, it is good to save the lists you would be
      interested in in a different file, which I call "Database_WordLister".
      Example syntax and some lists I like are found in the file with this
      name in this github repo.

13) Now I discuss quizzing with "Database3Quizzer.py". The first step is the
      login. You do not need to login for quizzes, but if you do not, you will
      need to specify your username and lexica for each quiz individually,
      which is not recommended, and instructions will not be provided.
      
    You will be prompted to login by typing your username upon loading
      Database3Quizzer into python. If you would like to change users or
      login after loading, use
    >>> dq.uname_global = dq.login_fxn()

14) The next step is create a databases with the lexica and quiz types that
      you want.
    
    To create a anagram quiz with a lexicon or lexica, use one of the following
    >>> dq.quiz_anag_db('lexYYYY')
    >>> dq.quiz_anag_mlex_db(['lex1YYYY','lex2YYYY',...,'lexnYYYY'])
    
    For hook quizzes, use one of the following:
    >>> dq.quiz_hook_db('lexYYYY')
    >>> dq.quiz_hook_mlex_db(['lex1YYYY','lex2YYYY',...,'lexnYYYY'])
    
15) At this point you can quiz. If you had saved wordlists in step 11, you can
      use the name of the wordlist in one of the following:
      
    >>> dq.quiz_anag('wordlist')
    >>> dq.quiz_anag_mlex('wordlist')
    >>> dq.quiz_hook('wordlist')
    >>> dq.quiz_hook_mlex('wordlist')
    
    For hook quizzes, you can also specify an integer length, and words will be
      selected from all words of that length in the specified lexicon/lexica.
    
