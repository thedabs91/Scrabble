    Steps:
 1) Save the ".py" files a folder somewhere on your computer to, and save any
      word lists to create dictionaries in the folder called "Words", that
      currently contains the file "wow2024.txt" (the WOW 2024 Wordlist).
 2) Use a command prompt with access to python (I use Anaconda prompt) to open
       this folder.
 3) Edit the file "WordListUpdater.py" to change the argument of `open` in
      `words_orig` to the name of the word list you want to add.
    
    > python WordListUpdater.py
    
 4) Open python and import "DictionaryMaker.py" as "dm" and create a text file
      including information about hooks and anagrams with the following code:
    
    >>> import DictionaryMaker as dm
    >>> dm.text_data_add('UpdatedWordList')
    
      where `UpdatedWordList` is the name of the file written by
      "DictionaryMaker.py".
 5) Change the name of the file "UpdatedDic" to "UpdatedDic_lexYYYY.txt", 
      replacing `lexYYYY` with the name and year of the lexicon that was added.
 6) Once all lexica are created, then you can start making the databases.
 7) In python, import `Database0Lexicon.py` as d0 and create the databases with
      the following code:
    
    >>> import Database0Lexicon as d0
    >>> d0.lex_table('lexYYYY')
    >>> d0.lex_db('lexYYYY')

    If a lexicon database needs to be deleted for any reason, that can be done
      with the following code:

    >>> d0.lex_table_delete('lexYYYY')
    
 8) Now the database should be created. Then users can be created.
 9) In python, import "Database1Users.py" in python and create your user account
      using the following code:
    
    >>> import Database1Users as d1
    >>> d1.create_user('username', ['ltrorder'])
    >>> d1.conn.commit() # Maybe this should be added in the code.
    
    Here, `username` should be replaced with the username that you wish to use.
    The optional second argument is the order you want letters to show in
      quizzes. The default is alphabetical.
    
10) Now that you have created a username, you can use quizzes.
11) I will now discuss "Database2Lister.py". This file could actually have been
      used before creating a username. It allows you to search the databases and
      create lists to use in quizzes. I will summarize some key functions below.
    
    gram_db - creates a database for words to be used in anagram quizzes
    hook_db - creates a database for words to be used in hook quizzes
      note: the programs above require specification of a lexicon.
    
    judge - Can check if a list of words (separated by commas, spacing is
              unimportant; first argument) is in the specified lexicon (second
              argument).
    search_anag/search_blanag - finds words using all letters in a specified
                                  rack. "search_blanag" allows for blanks (?).
    search_subgram - searches for words found within a string of letters of a
                       user-specified length.
    search_list - a function that can search for words with specified
                    characteristics.
    search_input - I am unsure if this works now.
    
    save_entries - saves lists of acceptable words to the gram database. Very
                     useful to use after a search from "search_list".
    save_grams - saves lists of grams

12) To use quizzes you must first create a tables in the database for the quiz
      results. The code for this is:

    >>> import Database2Lister as dl
    >>> dl.gram_db('lexYYYY')
    >>> dl.hook_db('lexYYYY')
   
      where 'lexYYYY' is replaced with the lexicon and year to add. Note that
      the import is as "dl" not "d1" and this is a different file.

12) Now I will talk about how to use quizzes.
13) To set up the infrastructure for quizzing, import "Database3Quizzer.py" and
      create the database for quizzing with the following code:
    
    >>> import Database3Quizzer as dq
    >>> dq.quiz_anag_db('lexYYYY')
    >>> dq.quiz_hook_db('lexYYYY')
        
    For bilexical and multilexical quizzes, you will need additional functions:
    
    >>> dq.quiz_anag_mlex_db(['lexYYY1', 'lexYYY2', ...])
    >>> dq.quiz_hook_mlex_db(['lexYYY1', 'lexYYY2', ...])
    
    To delete these tables, use the function dq.quiz_anag_db_drop() or
      dq.quiz_hook_db_drop(). For a multilexical database, include the lexica
      names separated by '_':
    
    >>> dq.quiz_anag_db_drop('lexYYY1_lexYYY2')

14) At this point you are ready to make wordlists for quizzing. Some basic
      wordlist ideas are in "Database_WordLister.py". Feel free to edit this
      file to contain any wordlists you think are useful for beginning players.
      To make a personal version that you don't want others to see, please
      create a file "Database_WordLister_<yourname>.py", which is ignored in
      the `.gitignore` file.
    
15) At this point you should be ready to start quizzing.
    The code to take an anagram quiz is below:

    >>> dq.quiz_anag('WordListName', [lexicon = 'lexYYYY', user = 'username'])
    >>> dq.quiz_hook('WordListName', [lexicon = 'lexYYYY', user = 'username'])
    >>> dq.quiz_anag_mlex('WordListName',\
                          [lexlist = ['lexYYY1', 'lexYYY2', ...],\
                            user = 'username])
    >>> dq.quiz_hook_mlex('WordListName',\
                          [lexlist = ['lexYYY1', 'lexYYY2', ...],\
                            user = 'username])
    
    In this code, the arguments in brackets are optional. The values for
      lexlist are in brackets because that is how they need to be entered.
    The "\" character is used as the way to continue to the next line. I use
      it here to keep lines to 80 characters; it is not recommended to use "\"
      in command line.


